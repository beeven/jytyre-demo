"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment-mini-ts");
const warranty_service_1 = require("./warranty.service");
const app = getApp();
Page({
    data: {
        loading: true,
        items: [],
    },
    async onLoad() {
        await app.ensureLogin();
        await this.reloadList();
    },
    onItemClicked(e) {
        console.log(e);
        let itemId = e.currentTarget.dataset["itemId"];
        wx.navigateTo({
            url: "./detail/detail?id=" + itemId,
        });
    },
    async addNew() {
        let warrantyID = await warranty_service_1.warrantyService.createWarrantyItem();
        wx.navigateTo({
            url: `./detail/detail?id=${warrantyID}`
        });
    },
    async UpdateItem(id, item) {
        let items = this.data.items;
        let i = items.findIndex(x => x.id === id);
        if (item.isDeleting) {
            if (i != -1) {
                items.splice(i, 1);
            }
        }
        else {
            if (i != -1) {
                items.splice(i, 1, item);
            }
            else {
                items.push(item);
            }
        }
        this.setData({
            items: items
        });
    },
    async onPullDownRefresh() {
        await this.reloadList();
        wx.stopPullDownRefresh();
    },
    async reloadList() {
        wx.showToast({
            title: '数据加载中',
            icon: 'loading',
            duration: 10000
        });
        let warrantyItems = await warranty_service_1.warrantyService.loadWarrantyItems();
        let viewItems = [];
        warrantyItems.forEach(item => {
            viewItems.push({
                id: item._id,
                plateNumber: item.plateNumber ? item.plateNumber : '车牌未填写',
                thumbnail: item.thumbnail,
                description: item.endDate ? `质保期限： ${moment(item.endDate).format("YYYY-MM-DD")}` : "",
                approvalStatus: item.approvalStatus,
                isDeleting: false
            });
        });
        console.log(warrantyItems);
        wx.hideToast();
        this.setData({
            items: viewItems,
            loading: false
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FycmFudHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXJyYW50eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUF5QztBQUN6Qyx5REFBcUU7QUFFckUsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFVLENBQUM7QUF5QjdCLElBQUksQ0FBaUM7SUFDakMsSUFBSSxFQUFFO1FBQ0YsT0FBTyxFQUFFLElBQUk7UUFDYixLQUFLLEVBQUUsRUFDTjtLQUNnQjtJQUNyQixLQUFLLENBQUMsTUFBTTtRQUNSLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTVCLENBQUM7SUFFRCxhQUFhLENBQUMsQ0FBYztRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNWLEdBQUcsRUFBRSxxQkFBcUIsR0FBRyxNQUFNO1NBQ3RDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFJRCxLQUFLLENBQUMsTUFBTTtRQUNSLElBQUksVUFBVSxHQUFHLE1BQU0sa0NBQWUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzVELEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDVixHQUFHLEVBQUUsc0JBQXNCLFVBQVUsRUFBRTtTQUMxQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBSUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFVLEVBQUUsSUFBc0I7UUFDL0MsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNULEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2FBQ3JCO1NBQ0o7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFO2dCQUNULEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2FBQ25CO1NBQ0o7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1QsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsS0FBSyxDQUFDLGlCQUFpQjtRQUNuQixNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN4QixFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFFWixFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ1QsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsU0FBUztZQUNmLFFBQVEsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUVILElBQUksYUFBYSxHQUFHLE1BQU0sa0NBQWUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRTlELElBQUksU0FBUyxHQUF1QixFQUFFLENBQUM7UUFDdkMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNYLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDWixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTztnQkFDMUQsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUN6QixXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyRixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7Z0JBQ25DLFVBQVUsRUFBRSxLQUFLO2FBQ3BCLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzQixFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1QsS0FBSyxFQUFFLFNBQVM7WUFDaEIsT0FBTyxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUVKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNeUFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcclxuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gXCJtb21lbnQtbWluaS10c1wiO1xyXG5pbXBvcnQgeyB3YXJyYW50eVNlcnZpY2UsIEFwcHJvdmFsU3RhdHVzIH0gZnJvbSAnLi93YXJyYW50eS5zZXJ2aWNlJztcclxuXHJcbmNvbnN0IGFwcCA9IGdldEFwcDxJTXlBcHA+KCk7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2FycmFudHlMaXN0SXRlbSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgcGxhdGVOdW1iZXI6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICB0aHVtYm5haWw6IHN0cmluZztcclxuICAgIGFwcHJvdmFsU3RhdHVzOiBBcHByb3ZhbFN0YXR1cztcclxuICAgIGlzRGVsZXRpbmc6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2FycmFudHlQYWdlRGF0YSB7XHJcbiAgICBpdGVtczogV2FycmFudHlMaXN0SXRlbVtdLFxyXG4gICAgbG9hZGluZzogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdhcnJhbnR5UGFnZSB7XHJcbiAgICBvbkl0ZW1DbGlja2VkKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBhZGROZXcoKTogdm9pZDtcclxuICAgIHJlbG9hZExpc3QoKTogdm9pZDtcclxuICAgIFVwZGF0ZUl0ZW0oaWQ6IHN0cmluZywgaXRlbTogV2FycmFudHlMaXN0SXRlbSk6IHZvaWQ7XHJcbn1cclxuXHJcblBhZ2U8V2FycmFudHlQYWdlRGF0YSwgV2FycmFudHlQYWdlPih7XHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgIF0sXHJcbiAgICB9IGFzIFdhcnJhbnR5UGFnZURhdGEsXHJcbiAgICBhc3luYyBvbkxvYWQoKSB7XHJcbiAgICAgICAgYXdhaXQgYXBwLmVuc3VyZUxvZ2luKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRMaXN0KCk7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICBvbkl0ZW1DbGlja2VkKGU6IGV2ZW50LlRvdWNoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgbGV0IGl0ZW1JZCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0W1wiaXRlbUlkXCJdO1xyXG4gICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgICB1cmw6IFwiLi9kZXRhaWwvZGV0YWlsP2lkPVwiICsgaXRlbUlkLFxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgYXN5bmMgYWRkTmV3KCkge1xyXG4gICAgICAgIGxldCB3YXJyYW50eUlEID0gYXdhaXQgd2FycmFudHlTZXJ2aWNlLmNyZWF0ZVdhcnJhbnR5SXRlbSgpO1xyXG4gICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgICB1cmw6IGAuL2RldGFpbC9kZXRhaWw/aWQ9JHt3YXJyYW50eUlEfWBcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcblxyXG5cclxuICAgIGFzeW5jIFVwZGF0ZUl0ZW0oaWQ6IHN0cmluZywgaXRlbTogV2FycmFudHlMaXN0SXRlbSkge1xyXG4gICAgICAgIGxldCBpdGVtcyA9IHRoaXMuZGF0YS5pdGVtcztcclxuICAgICAgICBsZXQgaSA9IGl0ZW1zLmZpbmRJbmRleCh4ID0+IHguaWQgPT09IGlkKTtcclxuICAgICAgICBpZiAoaXRlbS5pc0RlbGV0aW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5zcGxpY2UoaSwgMSwgaXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBvblB1bGxEb3duUmVmcmVzaCgpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZExpc3QoKTtcclxuICAgICAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIHJlbG9hZExpc3QoKSB7XHJcblxyXG4gICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn5pWw5o2u5Yqg6L295LitJyxcclxuICAgICAgICAgICAgaWNvbjogJ2xvYWRpbmcnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMDBcclxuICAgICAgICB9KTtcclxuICAgICAgICAvL2F3YWl0IHdhcnJhbnR5U2VydmljZS5zYW1wbGluZ0RhdGFiYXNlKCk7XHJcbiAgICAgICAgbGV0IHdhcnJhbnR5SXRlbXMgPSBhd2FpdCB3YXJyYW50eVNlcnZpY2UubG9hZFdhcnJhbnR5SXRlbXMoKTtcclxuXHJcbiAgICAgICAgbGV0IHZpZXdJdGVtczogV2FycmFudHlMaXN0SXRlbVtdID0gW107XHJcbiAgICAgICAgd2FycmFudHlJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICB2aWV3SXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZDogaXRlbS5faWQsXHJcbiAgICAgICAgICAgICAgICBwbGF0ZU51bWJlcjogaXRlbS5wbGF0ZU51bWJlciA/IGl0ZW0ucGxhdGVOdW1iZXIgOiAn6L2m54mM5pyq5aGr5YaZJyxcclxuICAgICAgICAgICAgICAgIHRodW1ibmFpbDogaXRlbS50aHVtYm5haWwsXHJcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaXRlbS5lbmREYXRlID8gYOi0qOS/neacn+mZkO+8miAke21vbWVudChpdGVtLmVuZERhdGUpLmZvcm1hdChcIllZWVktTU0tRERcIil9YCA6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhcHByb3ZhbFN0YXR1czogaXRlbS5hcHByb3ZhbFN0YXR1cyxcclxuICAgICAgICAgICAgICAgIGlzRGVsZXRpbmc6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgY29uc29sZS5sb2cod2FycmFudHlJdGVtcyk7XHJcblxyXG4gICAgICAgIHd4LmhpZGVUb2FzdCgpO1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgIGl0ZW1zOiB2aWV3SXRlbXMsXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbn0pXHJcblxyXG4iXX0=
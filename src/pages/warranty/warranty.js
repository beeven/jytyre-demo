"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment-mini-ts");
const warranty_service_1 = require("./warranty.service");
const app = getApp();
Page({
    data: {
        loading: true,
        items: []
    },
    async onLoad() {
        await app.ensureLogin();
        await this.reloadList();
    },
    onShow() {
        console.log(this.route);
    },
    onItemClicked(e) {
        console.log(e);
        let itemId = e.currentTarget.dataset["itemId"];
        wx.navigateTo({
            url: "./detail/detail?id=" + itemId,
        });
    },
    async addNew() {
        let warrantyID = await warranty_service_1.warrantyService.createWarrantyItem();
        wx.navigateTo({
            url: `./add/add?id=${warrantyID}`
        });
    },
    async onItemRemoved(id) {
        let items = this.data.items;
        let i = items.findIndex(x => x.id == id);
        items.splice(i, 1);
        this.setData({
            items: items
        });
    },
    async onItemAdded(id, item) {
        let items = this.data.items;
        items.push(item);
        this.setData({
            items: items
        });
    },
    async onPullDownRefresh() {
        await this.reloadList();
        wx.stopPullDownRefresh();
    },
    async reloadList() {
        wx.showToast({
            title: '数据加载中',
            icon: 'loading',
            duration: 10000
        });
        await warranty_service_1.warrantyService.samplingDatabase();
        let warrantyItems = await warranty_service_1.warrantyService.loadWarrantyItems();
        let viewItems = [];
        warrantyItems.forEach(item => {
            viewItems.push({
                id: item._id,
                plateNumber: item.plateNumber,
                thumbnail: item.thumbnail,
                description: item.endDate ? `质保期限： ${moment(item.endDate).format("YYYY-MM-DD")}` : "",
                approvalStatus: item.approvalStatus
            });
        });
        console.log(warrantyItems);
        wx.hideToast();
        this.setData({
            items: viewItems,
            loading: false
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FycmFudHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXJyYW50eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHlDQUF5QztBQUN6Qyx5REFBcUU7QUFFckUsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFVLENBQUM7QUF5QjdCLElBQUksQ0FBaUM7SUFDakMsSUFBSSxFQUFFO1FBQ0YsT0FBTyxFQUFFLElBQUk7UUFDYixLQUFLLEVBQUUsRUFDTjtLQUNnQjtJQUNyQixLQUFLLENBQUMsTUFBTTtRQUNSLE1BQU0sR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTVCLENBQUM7SUFFRCxNQUFNO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELGFBQWEsQ0FBQyxDQUFjO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQyxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ1YsR0FBRyxFQUFFLHFCQUFxQixHQUFHLE1BQU07U0FDdEMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUlELEtBQUssQ0FBQyxNQUFNO1FBQ1IsSUFBSSxVQUFVLEdBQUcsTUFBTSxrQ0FBZSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDNUQsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNWLEdBQUcsRUFBRSxnQkFBZ0IsVUFBVSxFQUFFO1NBQ3BDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFHRCxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQVU7UUFDMUIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNULEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBVSxFQUFFLElBQXNCO1FBQ2hELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNULEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUssQ0FBQyxpQkFBaUI7UUFDbkIsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDeEIsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBRVosRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUNULEtBQUssRUFBRSxPQUFPO1lBQ2QsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUM7UUFDSCxNQUFNLGtDQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN6QyxJQUFJLGFBQWEsR0FBRyxNQUFNLGtDQUFlLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUU5RCxJQUFJLFNBQVMsR0FBdUIsRUFBRSxDQUFDO1FBQ3ZDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDWCxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ1osV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO2dCQUM3QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQyxTQUFTLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BGLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYzthQUN0QyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFM0IsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNULEtBQUssRUFBRSxTQUFTO1lBQ2hCLE9BQU8sRUFBRSxLQUFLO1NBQ2pCLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FFSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTXlBcHAgfSBmcm9tIFwiLi4vLi4vYXBwXCI7XHJcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tIFwibW9tZW50LW1pbmktdHNcIjtcclxuaW1wb3J0IHsgd2FycmFudHlTZXJ2aWNlLCBBcHByb3ZhbFN0YXR1cyB9IGZyb20gJy4vd2FycmFudHkuc2VydmljZSc7XHJcblxyXG5jb25zdCBhcHAgPSBnZXRBcHA8SU15QXBwPigpO1xyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdhcnJhbnR5TGlzdEl0ZW0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHBsYXRlTnVtYmVyOiBzdHJpbmc7XHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gICAgdGh1bWJuYWlsOiBzdHJpbmc7XHJcbiAgICBhcHByb3ZhbFN0YXR1czogQXBwcm92YWxTdGF0dXM7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2FycmFudHlQYWdlRGF0YSB7XHJcbiAgICBpdGVtczogV2FycmFudHlMaXN0SXRlbVtdLFxyXG4gICAgbG9hZGluZzogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFdhcnJhbnR5UGFnZSB7XHJcbiAgICBvbkl0ZW1DbGlja2VkKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBhZGROZXcoKTogdm9pZDtcclxuICAgIG9uSXRlbVJlbW92ZWQoaWQ6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICByZWxvYWRMaXN0KCk6IHZvaWQ7XHJcbiAgICBvbkl0ZW1BZGRlZChpZDogc3RyaW5nLCBpdGVtOiBXYXJyYW50eUxpc3RJdGVtKTogdm9pZDtcclxufVxyXG5cclxuUGFnZTxXYXJyYW50eVBhZ2VEYXRhLCBXYXJyYW50eVBhZ2U+KHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBsb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgIGl0ZW1zOiBbXHJcbiAgICAgICAgXVxyXG4gICAgfSBhcyBXYXJyYW50eVBhZ2VEYXRhLFxyXG4gICAgYXN5bmMgb25Mb2FkKCkge1xyXG4gICAgICAgIGF3YWl0IGFwcC5lbnN1cmVMb2dpbigpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVsb2FkTGlzdCgpO1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgb25TaG93KCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucm91dGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkl0ZW1DbGlja2VkKGU6IGV2ZW50LlRvdWNoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgbGV0IGl0ZW1JZCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0W1wiaXRlbUlkXCJdO1xyXG4gICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgICB1cmw6IFwiLi9kZXRhaWwvZGV0YWlsP2lkPVwiICsgaXRlbUlkLFxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG5cclxuXHJcblxyXG4gICAgYXN5bmMgYWRkTmV3KCkge1xyXG4gICAgICAgIGxldCB3YXJyYW50eUlEID0gYXdhaXQgd2FycmFudHlTZXJ2aWNlLmNyZWF0ZVdhcnJhbnR5SXRlbSgpO1xyXG4gICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgICB1cmw6IGAuL2FkZC9hZGQ/aWQ9JHt3YXJyYW50eUlEfWBcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuXHJcblxyXG4gICAgYXN5bmMgb25JdGVtUmVtb3ZlZChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gdGhpcy5kYXRhLml0ZW1zO1xyXG4gICAgICAgIGxldCBpID0gaXRlbXMuZmluZEluZGV4KHggPT4geC5pZCA9PSBpZCk7XHJcbiAgICAgICAgaXRlbXMuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIG9uSXRlbUFkZGVkKGlkOiBzdHJpbmcsIGl0ZW06IFdhcnJhbnR5TGlzdEl0ZW0pIHtcclxuICAgICAgICBsZXQgaXRlbXMgPSB0aGlzLmRhdGEuaXRlbXM7XHJcbiAgICAgICAgaXRlbXMucHVzaChpdGVtKVxyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBvblB1bGxEb3duUmVmcmVzaCgpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbG9hZExpc3QoKTtcclxuICAgICAgICB3eC5zdG9wUHVsbERvd25SZWZyZXNoKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIHJlbG9hZExpc3QoKSB7XHJcblxyXG4gICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn5pWw5o2u5Yqg6L295LitJyxcclxuICAgICAgICAgICAgaWNvbjogJ2xvYWRpbmcnLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMDBcclxuICAgICAgICB9KTtcclxuICAgICAgICBhd2FpdCB3YXJyYW50eVNlcnZpY2Uuc2FtcGxpbmdEYXRhYmFzZSgpO1xyXG4gICAgICAgIGxldCB3YXJyYW50eUl0ZW1zID0gYXdhaXQgd2FycmFudHlTZXJ2aWNlLmxvYWRXYXJyYW50eUl0ZW1zKCk7XHJcblxyXG4gICAgICAgIGxldCB2aWV3SXRlbXM6IFdhcnJhbnR5TGlzdEl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIHdhcnJhbnR5SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdmlld0l0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW0uX2lkLFxyXG4gICAgICAgICAgICAgICAgcGxhdGVOdW1iZXI6IGl0ZW0ucGxhdGVOdW1iZXIsXHJcbiAgICAgICAgICAgICAgICB0aHVtYm5haWw6IGl0ZW0udGh1bWJuYWlsLFxyXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGl0ZW0uZW5kRGF0ZT8gYOi0qOS/neacn+mZkO+8miAke21vbWVudChpdGVtLmVuZERhdGUpLmZvcm1hdChcIllZWVktTU0tRERcIil9YCA6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICBhcHByb3ZhbFN0YXR1czogaXRlbS5hcHByb3ZhbFN0YXR1c1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHdhcnJhbnR5SXRlbXMpO1xyXG5cclxuICAgICAgICB3eC5oaWRlVG9hc3QoKTtcclxuICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICBpdGVtczogdmlld0l0ZW1zLFxyXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG59KVxyXG5cclxuIl19
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../../utils/util");
const app = getApp();
Page({
    data: {
        items: [
            { "insuranceID": "11111", plate: "粤A DE077", dateCreated: "2019-07-03" },
            { "insuranceID": "2222", plate: "粤A DE078", dateCreated: "2019-07-03" }
        ]
    },
    async onLoad() {
        let items = await loadInsuranceList();
        console.log(items);
        console.log(util_1.formatTime(new Date()).substr(0, 10));
        this.setData({
            items: items
        });
    },
});
async function loadInsuranceList() {
    const db = wx.cloud.database();
    let items = await db.collection("insurance").where({
        _openid: app.globalData.openid
    }).get();
    let ret = [];
    items.data.forEach(item => {
        ret.push({
            insuranceID: item._id.toString(),
            plate: item["plate"],
            dateCreated: util_1.formatTime(new Date()).substr(0, 10)
        });
    });
    return ret;
}
async function saveSampleInsurance() {
    const db = wx.cloud.database();
    let ret = await db.collection("insurance").add({
        data: {
            plate: "粤A DE" + Math.round((Math.random() * 1000)).toString().padStart(3, '0'),
            dateCreated: new Date()
        }
    });
    return ret._id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdXJhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdXJhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsMkNBQThDO0FBRTlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBVSxDQUFDO0FBWTdCLElBQUksQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLEtBQUssRUFBRTtZQUNILEVBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsVUFBVSxFQUFFLFdBQVcsRUFBQyxZQUFZLEVBQUM7WUFDcEUsRUFBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxVQUFVLEVBQUUsV0FBVyxFQUFDLFlBQVksRUFBQztTQUN0RTtLQUNpQjtJQUN0QixLQUFLLENBQUMsTUFBTTtRQUNSLElBQUksS0FBSyxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxLQUFLLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQTtJQUVOLENBQUM7Q0FHSixDQUFDLENBQUE7QUFJRixLQUFLLFVBQVUsaUJBQWlCO0lBQzVCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsSUFBSSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMvQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNO0tBQ2pDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNULElBQUksR0FBRyxHQUF3QixFQUFFLENBQUM7SUFDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNMLFdBQVcsRUFBRSxJQUFJLENBQUMsR0FBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNwQixXQUFXLEVBQUUsaUJBQVUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUM7U0FDbkQsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUM7QUFFRCxLQUFLLFVBQVUsbUJBQW1CO0lBQzlCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUMzQyxJQUFJLEVBQUU7WUFDRixLQUFLLEVBQUUsT0FBTyxHQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLEdBQUcsQ0FBQztZQUM3RSxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDMUI7S0FDSixDQUFDLENBQUM7SUFDSCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNeUFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcclxuaW1wb3J0IHsgZm9ybWF0VGltZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuY29uc3QgYXBwID0gZ2V0QXBwPElNeUFwcD4oKTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5zdXJhbmNlTGlzdEl0ZW0ge1xyXG4gICAgaW5zdXJhbmNlSUQ6IHN0cmluZztcclxuICAgIHBsYXRlOiBzdHJpbmc7XHJcbiAgICBkYXRlQ3JlYXRlZDogc3RyaW5nXHJcbn1cclxuXHJcbmludGVyZmFjZSBJbnN1cmFuY2VQYWdlRGF0YSB7XHJcbiAgICBpdGVtczogSW5zdXJhbmNlTGlzdEl0ZW1bXVxyXG59XHJcblxyXG5QYWdlKHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICB7XCJpbnN1cmFuY2VJRFwiOiBcIjExMTExXCIsIHBsYXRlOlwi57KkQSBERTA3N1wiLCBkYXRlQ3JlYXRlZDpcIjIwMTktMDctMDNcIn0sXHJcbiAgICAgICAgICAgIHtcImluc3VyYW5jZUlEXCI6IFwiMjIyMlwiLCBwbGF0ZTpcIueypEEgREUwNzhcIiwgZGF0ZUNyZWF0ZWQ6XCIyMDE5LTA3LTAzXCJ9XHJcbiAgICAgICAgXVxyXG4gICAgfSBhcyBJbnN1cmFuY2VQYWdlRGF0YSxcclxuICAgIGFzeW5jIG9uTG9hZCgpIHtcclxuICAgICAgICBsZXQgaXRlbXMgPSBhd2FpdCBsb2FkSW5zdXJhbmNlTGlzdCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGl0ZW1zKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmb3JtYXRUaW1lKG5ldyBEYXRlKCkpLnN1YnN0cigwLDEwKSk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9LFxyXG5cclxuXHJcbn0pXHJcblxyXG5cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGxvYWRJbnN1cmFuY2VMaXN0KCl7XHJcbiAgICBjb25zdCBkYiA9IHd4LmNsb3VkLmRhdGFiYXNlKCk7XHJcbiAgICBsZXQgaXRlbXMgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKFwiaW5zdXJhbmNlXCIpLndoZXJlKHtcclxuICAgICAgICBfb3BlbmlkOiBhcHAuZ2xvYmFsRGF0YS5vcGVuaWRcclxuICAgIH0pLmdldCgpO1xyXG4gICAgbGV0IHJldDogSW5zdXJhbmNlTGlzdEl0ZW1bXSA9IFtdO1xyXG4gICAgaXRlbXMuZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIHJldC5wdXNoKHtcclxuICAgICAgICAgICAgaW5zdXJhbmNlSUQ6IGl0ZW0uX2lkIS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBwbGF0ZTogaXRlbVtcInBsYXRlXCJdLFxyXG4gICAgICAgICAgICBkYXRlQ3JlYXRlZDogZm9ybWF0VGltZShuZXcgRGF0ZSgpKS5zdWJzdHIoMCwxMClcclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzYXZlU2FtcGxlSW5zdXJhbmNlKCl7XHJcbiAgICBjb25zdCBkYiA9IHd4LmNsb3VkLmRhdGFiYXNlKCk7XHJcbiAgICBsZXQgcmV0ID0gYXdhaXQgZGIuY29sbGVjdGlvbihcImluc3VyYW5jZVwiKS5hZGQoe1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgcGxhdGU6IFwi57KkQSBERVwiKyBNYXRoLnJvdW5kKChNYXRoLnJhbmRvbSgpICogMTAwMCkpLnRvU3RyaW5nKCkucGFkU3RhcnQoMywnMCcpLFxyXG4gICAgICAgICAgICBkYXRlQ3JlYXRlZDogbmV3IERhdGUoKVxyXG4gICAgICAgIH0gXHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQuX2lkO1xyXG59Il19
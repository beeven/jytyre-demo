"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const moment = require("moment");
const app = getApp();
Page({
    data: {
        items: [
            { "insuranceID": "11111", plate: "粤A DE077", dateCreated: "2019-07-03" },
            { "insuranceID": "2222", plate: "粤A DE078", dateCreated: "2019-07-03" }
        ]
    },
    async onLoad() {
        let items = await loadInsuranceList();
        console.log(items);
        this.setData({
            items: items
        });
        for (let i = 0; i < 3; i++) {
            await saveSampleInsurance();
        }
    },
});
async function loadInsuranceList() {
    const db = wx.cloud.database();
    let items = await db.collection("insurance").where({
        _openid: app.globalData.openid
    }).get();
    let ret = [];
    items.data.forEach(item => {
        ret.push({
            insuranceID: item._id.toString(),
            plate: item["plate"],
            dateCreated: moment(item["dateCreated"]).format("YYYY-MM-DD")
        });
    });
    return ret;
}
async function saveSampleInsurance() {
    const db = wx.cloud.database();
    let ret = await db.collection("insurance").add({
        data: {
            plate: "粤A DE" + Math.round((Math.random() * 1000)).toString().padStart(3, '0'),
            dateCreated: (new Date())
        }
    });
    return ret._id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdXJhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5zdXJhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWlDO0FBRWpDLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBVSxDQUFDO0FBYzdCLElBQUksQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLEtBQUssRUFBRTtZQUNILEVBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsVUFBVSxFQUFFLFdBQVcsRUFBQyxZQUFZLEVBQUM7WUFDcEUsRUFBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxVQUFVLEVBQUUsV0FBVyxFQUFDLFlBQVksRUFBQztTQUN0RTtLQUNpQjtJQUN0QixLQUFLLENBQUMsTUFBTTtRQUNSLElBQUksS0FBSyxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxLQUFLLEVBQUUsS0FBSztTQUNmLENBQUMsQ0FBQTtRQUVGLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDakIsTUFBTSxtQkFBbUIsRUFBRSxDQUFDO1NBQy9CO0lBRUwsQ0FBQztDQUdKLENBQUMsQ0FBQTtBQUlGLEtBQUssVUFBVSxpQkFBaUI7SUFDNUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixJQUFJLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9DLE9BQU8sRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU07S0FDakMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ1QsSUFBSSxHQUFHLEdBQXdCLEVBQUUsQ0FBQztJQUNsQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ0wsV0FBVyxFQUFFLElBQUksQ0FBQyxHQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQztTQUNoRSxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUVELEtBQUssVUFBVSxtQkFBbUI7SUFDOUIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzNDLElBQUksRUFBRTtZQUNGLEtBQUssRUFBRSxPQUFPLEdBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsR0FBRyxDQUFDO1lBQzdFLFdBQVcsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7U0FDNUI7S0FDSixDQUFDLENBQUM7SUFDSCxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNeUFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcclxuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG5jb25zdCBhcHAgPSBnZXRBcHA8SU15QXBwPigpO1xyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEluc3VyYW5jZUxpc3RJdGVtIHtcclxuICAgIGluc3VyYW5jZUlEOiBzdHJpbmc7XHJcbiAgICBwbGF0ZTogc3RyaW5nO1xyXG4gICAgZGF0ZUNyZWF0ZWQ6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSW5zdXJhbmNlUGFnZURhdGEge1xyXG4gICAgaXRlbXM6IEluc3VyYW5jZUxpc3RJdGVtW11cclxufVxyXG5cclxuUGFnZSh7XHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgaXRlbXM6IFtcclxuICAgICAgICAgICAge1wiaW5zdXJhbmNlSURcIjogXCIxMTExMVwiLCBwbGF0ZTpcIueypEEgREUwNzdcIiwgZGF0ZUNyZWF0ZWQ6XCIyMDE5LTA3LTAzXCJ9LFxyXG4gICAgICAgICAgICB7XCJpbnN1cmFuY2VJRFwiOiBcIjIyMjJcIiwgcGxhdGU6XCLnsqRBIERFMDc4XCIsIGRhdGVDcmVhdGVkOlwiMjAxOS0wNy0wM1wifVxyXG4gICAgICAgIF1cclxuICAgIH0gYXMgSW5zdXJhbmNlUGFnZURhdGEsXHJcbiAgICBhc3luYyBvbkxvYWQoKSB7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gYXdhaXQgbG9hZEluc3VyYW5jZUxpc3QoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhpdGVtcyk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgZm9yKGxldCBpPTA7aTwzO2krKykge1xyXG4gICAgICAgICAgICBhd2FpdCBzYXZlU2FtcGxlSW5zdXJhbmNlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0sXHJcblxyXG5cclxufSlcclxuXHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gbG9hZEluc3VyYW5jZUxpc3QoKXtcclxuICAgIGNvbnN0IGRiID0gd3guY2xvdWQuZGF0YWJhc2UoKTtcclxuICAgIGxldCBpdGVtcyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oXCJpbnN1cmFuY2VcIikud2hlcmUoe1xyXG4gICAgICAgIF9vcGVuaWQ6IGFwcC5nbG9iYWxEYXRhLm9wZW5pZFxyXG4gICAgfSkuZ2V0KCk7XHJcbiAgICBsZXQgcmV0OiBJbnN1cmFuY2VMaXN0SXRlbVtdID0gW107XHJcbiAgICBpdGVtcy5kYXRhLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgcmV0LnB1c2goe1xyXG4gICAgICAgICAgICBpbnN1cmFuY2VJRDogaXRlbS5faWQhLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIHBsYXRlOiBpdGVtW1wicGxhdGVcIl0sXHJcbiAgICAgICAgICAgIGRhdGVDcmVhdGVkOiBtb21lbnQoaXRlbVtcImRhdGVDcmVhdGVkXCJdKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc2F2ZVNhbXBsZUluc3VyYW5jZSgpe1xyXG4gICAgY29uc3QgZGIgPSB3eC5jbG91ZC5kYXRhYmFzZSgpO1xyXG4gICAgbGV0IHJldCA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oXCJpbnN1cmFuY2VcIikuYWRkKHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIHBsYXRlOiBcIueypEEgREVcIisgTWF0aC5yb3VuZCgoTWF0aC5yYW5kb20oKSAqIDEwMDApKS50b1N0cmluZygpLnBhZFN0YXJ0KDMsJzAnKSxcclxuICAgICAgICAgICAgZGF0ZUNyZWF0ZWQ6IChuZXcgRGF0ZSgpKSBcclxuICAgICAgICB9IFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmV0Ll9pZDtcclxufSJdfQ==